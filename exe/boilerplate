
#!/usr/bin/env ruby


STDOUT.sync = true

$LOAD_PATH.unshift File.expand_path("../lib", __dir__)

require 'jekyll_page_boilerplate'
require "mercenary"

Mercenary.program('jekyllpage') do |p|
  p.version Jekyll::VERSION
  p.description 'Jekyll-page-boilerplate is a gem for jekyll that helps you generate new pages'
  p.syntax "jekyll-page <subcommand> [options]"

  p.command(:new) do |c|
    c.syntax "new PATH" # do not include the program name or super commands
    c.description "Creates a new Jekyll site scaffold in PATH"
    c.option 'blank', '--blank', 'Initialize the new site without any content.'

    c.action do |args, options|
      Jekyll::Commands::New.process(args, blank: options['blank'])
    end
  end

  p.command(:build) do |c|
    c.syntax "build [options]"
    c.description "Builds your Jekyll site"

    c.option 'safe', '--safe', 'Run in safe mode'
    c.option 'source', '--source DIR', 'From where to collect the source files'
    c.option 'destination', '--dest DIR', 'To where the compiled files should be written'

    c.action do |_, options|
      Jekyll::Commands::Build.process(options)
    end
  end

  # Bring in command bundled in external gem
  begin
    require "jekyll-import"
    JekyllImport.init_with_program(p)
  rescue LoadError
  end

  p.default_command(:build)
end

boilerplate_name = ARGV[0]
title = ARGV[1]

if ARGV[0] == 'help'
  puts JekyllPageBoilerplate::Msg::HELP

elsif ARGV.size == 2
  JekyllPageBoilerplate::Page.build boilerplate_name, title  

else
  puts JekyllPageBoilerplate::Msg::USAGE

end